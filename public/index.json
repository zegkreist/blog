[{"authors":["admin"],"categories":null,"content":"Navarro Rosa é um jovem estatístico que adora resolver problemas e responder perguntas usando dados. Já trabalhou com dados de notas fiscais de mais de um milhão de pessoas. Criando modelos para categorizar os produtos descritos nos cupons. Realizou análises de mercado e de cesta. Desenhou e aplicou testes A|B para verificar o efeito de campanha de marketing.\nHoje trabalha com dados de saúde. Fazendo modelos preditivos para doenças, chamando a atenção de médicos para os pacientes mais sérios. Testando a efetividade de programas médicos aplicado à populações.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Navarro Rosa é um jovem estatístico que adora resolver problemas e responder perguntas usando dados. Já trabalhou com dados de notas fiscais de mais de um milhão de pessoas. Criando modelos para categorizar os produtos descritos nos cupons. Realizou análises de mercado e de cesta. Desenhou e aplicou testes A|B para verificar o efeito de campanha de marketing.\nHoje trabalha com dados de saúde. Fazendo modelos preditivos para doenças, chamando a atenção de médicos para os pacientes mais sérios.","tags":null,"title":"Navarro Rosa","type":"authors"},{"authors":null,"categories":null,"content":"Tutorialzinho de Docker para dar um empurrão nos estudos, se você precisar é claro!\nAqui temos basicamente três sessões.\n Docker Installation: Faço um passo a passo de como instalhar o bagulho Docker Commands: Mostro os principais comandos Docker Compose: Mostro e exemplifico o docker-compose  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"2c26cbd1ed5aa1c685f844494d11f656","permalink":"/tutoriais/docker/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/tutoriais/docker/","section":"tutoriais","summary":"Aqui irei passar por alguns tópicos, como instalar o docker e docker-compose e como utilizá-los","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":" Docker O Docker é uma tecnologia de contêiner. Um contêiner basicamente é um pacote em que há os códigos de uma aplicação, assim como toda a parte necessária (em questão de dependências de SO e bibliotecas da própria aplicação).\nO Docker é um software que permite a construção e execução destes contêineres. A construção é feita a partir de um \u0026lsquo;Dockerfile\u0026rsquo;, nada mais que uma receita de bolo. Este arquivo possui as diretrizes do que é necessário para sua aplicação rodar. Por meio dele é possível construir uma imagem, esta imagem quando executada cria o contêiner.\nA base do que iremos fazer depende do docker, então nessa etapa inicial ensinarei a instalar, dar alguns exemplos de chamadas e também como criar o Dockerfile.\nInstalação docker Para se usar alguma coisa é necessário primeiro tê-la, logo \u0026hellip; Irei basear a instalação em um Linux CentOS 7. A depender do sabor do linux utilizado faz com que algumas coisas nos sistema variem. Por exemplo, o comando de instalação de pacotes, o caminho de arquivos de configurações do sistema podem mudar. Assim como algumas \u0026ldquo;facilidades\u0026rdquo;, comandos podem existir num sabor e não em outro. Então caso procure algum tutorial de instalação, ou de solução de problemas, procure soluções de acordo com o sabor que estiver utilizando.\nDito isso, vamos começar a instalar o Docker para um sabor baseado em CentOS7.\nPara evitar problemas, vamos primeiro garantir que não haja nada de docker instalado na máquina.\nsudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine  Este comando tem o seguinte significado:\n sudo: Tem o significado de \u0026ldquo;faça\u0026rdquo; (do) como \u0026ldquo;super usuário\u0026rdquo; (su). O super usuário nada mais é que o administrador da máquina, tem plenos poderes sobre ela. Normalmente quando executado alguma coisa como super usuário não há qualquer pergunta (caso execute o comando para deletar um arquivo essencial para o sistema, não haverá qualquer pergunta, a execução será direta, caixão e vela preta). Outra opção ao sudo seria logar como SU e executando o comando posterior (em distribuições como Debian isso é necessário, pois não há comando sudo).\n yum: Este é um programa que gerencia os pacotes instalados do CentOS. Caso fosse uma distribuição baseada em Debian como Ubuntu seria aptou apt-get. Se fosse baseado em Arch seria pacman.\n remove: Este é um argumento para o programa yum. Este argumento informa que qualquer pacote descrito a frente deve ser removido.\n \\: Esta barra invertida é apenas uma quebra de linha para facilitar a visualização. Normalmente o comando existe em apenas uma única linha.\n  Vamos instalar o Docker via repositório. O repositório é um \u0026ldquo;espaço\u0026rdquo; em que seu OS \u0026ldquo;confia\u0026rdquo; para buscar pacotes e instalá-los na máquina. Normalmente o OS linux quando instalado já possui uma lista de repositórios confiáveis e oficiais em que pode contar, cada distribuição possui sua própria coleção de repositórios padrão. Aqui vamos adicionar um repositório nesta lista, o do docker-ce. Para isso, inicialmente será instalado alguns programas auxiliares ao yum, para podermos adicionar o novo repositório.\nsudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2  Agora adicionando o repositório:\nsudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo  Utilizando o programa auxiliar yum-config-manager adicionamos o repositório na lista do yum. O argumento --add-repo é um argumento de chamada para o programa, logo após, especificamos qual o valor deste argumento, o link para o repositório.\nAgora que temos o repositório onde o docker-ce existe podemos instalá-lo da seguinte forma (semelhante ao que já utilizamos antes):\nsudo yum install docker-ce docker-ce-cli containerd.io  O docker foi instalado, porém não iniciado, para isso:\nsudo systemctl start docker   sudo: Faça como super usuário\n systemctl: É o programa que organiza os processos do sistema\n start: É um argumento para o programa systemctl, dizendo para iniciar o programa de nome a frente.\n  Neste passo o Docker está iniciado. Mas há 2 poréns, o primeiro é que sempre que a máquina reiniciar o processo ficará parado, o segundo é que apenas o super usuário possui permissão de executar o docker.\nResolvendo o primeiro porém:\nsudo systemctl enable docker  Resolvendo o Segundo porém:\n Uma forma é sempre usar sudo para executar comandos docker\n A segunda é dar permissão ao seu usuário para executar comandos docker\nsudo usermod -aG docker $USER   Normalmente já existe um grupo chamado \u0026ldquo;docker\u0026rdquo; criado na hora da instalação. O que fazemos nesse comando é adicionar o nosso usuário $USER no grupo docker. Eu prefiro utilizar sempre o comando sudo para executar os comandos docker.\nVamos testar o docker:\nsudo docker run hello-world  Este comando executa uma imagem chamada hello-world (caso ela não exista no seu PC, o docker faz o download dela no repositório oficial do docker, o docker hub (não confundir com repositório de pacotes do sistema)).\nInstalação docker-compose O docker-compose ajuda na orquestração de uma imagem docker. Para executar uma imagem docker há vários parâmetros a serem setados para um comando só (como veremos adiante). Com o docker-compose é possível reescrever todos esses comandos em um único arquivo que pode ser versionado. Em um único arquivo, também é possível \u0026lsquo;levantar\u0026rsquo; várias imagens diferentes, com seus próprios argumentos e configuração de como essas imagens irão conversar.\nA instalação do docker-compose é diferente das demais. Ainda não há um pacote fechado para ele, o que fazemos nada mais é do que fazer o download de seus binários para um local do sistema e dar permissões a esses arquivos.\nsudo curl -L \u0026quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\u0026quot; -o /usr/local/bin/docker-compose   curl: O curl é basicamente um navegador web para a linha de comando. Ele baixa o arquivo e o coloca no caminho especificado no output $(uname -s) e $(uname -m): São variáveis do sistema, o primeiro retorna \u0026ldquo;Linux\u0026rdquo; o segundo a arquitetura \u0026ldquo;x86_64\u0026rdquo;.  Agora é necessário dar permissão de execução para o arquivo:\nsudo chmod +x /usr/local/bin/docker-compose   chmod: Este comando altera permissões +x: Este é um argumento para o chmod o x significa \u0026lsquo;executável\u0026rsquo;.  Testando a instalação:\ndocker-compose --version  AEWW!!! Docker e Docker-compose instalados, agora vamos a exemplos:\nExemplos: Docker Vamos iniciar por exemplos simples, ver alguns comandos, subir algumas imagens simples e pequenas, subir alguma imagem de alguma aplicação visual (algo mais tátil), construir algum Dockerfile.\n\n","date":1564617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564617600,"objectID":"16ad5c9d605b4b23e7a77f3149ce04b0","permalink":"/tutoriais/docker/docker_installation/","publishdate":"2019-08-01T00:00:00Z","relpermalink":"/tutoriais/docker/docker_installation/","section":"tutoriais","summary":"Docker O Docker é uma tecnologia de contêiner. Um contêiner basicamente é um pacote em que há os códigos de uma aplicação, assim como toda a parte necessária (em questão de dependências de SO e bibliotecas da própria aplicação).\nO Docker é um software que permite a construção e execução destes contêineres. A construção é feita a partir de um \u0026lsquo;Dockerfile\u0026rsquo;, nada mais que uma receita de bolo. Este arquivo possui as diretrizes do que é necessário para sua aplicação rodar.","tags":null,"title":"Docker Installation","type":"docs"},{"authors":null,"categories":null,"content":" Comandos: run O comando run, quando não utilizado com outra ferramente de orquestração, como docker-compose, kubernets, ou outro, será o comando mais utilizado. Ele roda um container por meio de uma imagem, normalmente o container executa um comando e morre. A imagem hello-world basicamente executa um print de texto no console e depois morre (na verdade finaliza com sucesso). Se subirmos um script batch, será executado tudo que deve ser feito e depois o container morre. Se subirmos um serviço contínuo o comportamento ainda é o mesmo, porém a \u0026ldquo;sensação\u0026rdquo; é outra, por exemplo, subimos um serviço de banco de dados, o comando que a imagem terá é executar o banco, a imagem continuará ativa durante toda a \u0026ldquo;execução do comando\u0026rdquo;, ou seja, a imagem só irá morrer caso o banco de dados morra por algum motivo.\nPrimeiro, há duas formas de executar uma imagem, no Foreground (seu console vai ficar preso no que for executado) e no Background (ou detached) o container será executada no plano de fundo.\nVamos subir um bash de uma imagem que seja um OS ubuntu em foreground:\nsudo docker run -it ubuntu bash   run: Comando que executa uma imagem -it: Argumentos para o comando run, i significa interativo, t ativa um tipo de buffer para entradas de texto ubuntu: O nome da imagem que será executado bash: O programa q será executado dentro da imagem, neste caso iniciaremos o console.  Note que, agora você está num ambiente ubuntu, dentro do container Aqui você pode fazer qualquer coisa, inclusive deletar seu OS (pois quando restartar o container ele virá no mesmo formato de antes, que é o que foi colocado na imagem). Faça alguns testes aqui a seu prazer.\nPara sair de dentro da imagem execute exit.\nVamos agora subir um container mais \u0026ldquo;visual\u0026rdquo;. Muitos estão falando sobre o Metabase, um visualizador gratuito. Então vamos subir uma aplicação em Foreground de Metabase para que possamos acessá-la.\nsudo docker run -p 8787:3000 metabase/metabase   -p: Aqui temos um argumento novo, a porta. O app fica exposto numa porta, nesse caso na porta 3000. Porém essa porta é do contêiner e nós acessamos a máquina (host), então é necessário que seja construído um caminho para a porta do container. Então, quando se acessa http://127.0.0.1:8787/setup você está acessando na verdade o contêiner na porta 3000. Caso você esteja em alguma instância o endereço seria http://ip-da-instancia:8787/setup. (porta do host à esquerda e do contêiner à direita)\n metabase/metabase: O nome da imagem, caso não tenha a imagem no PC o docker irá procurar em seu repositório\n  Observe seu terminal, veja que ele está preso à aplicação, caso seu terminal morra a aplicação também irá sofrer o mesmo destino. Vamos subir a aplicação no modo detached.\nMas primeiro mate sua execução atual CTRL + C.\nAgora sim, vamos subir no modo detached.\nsudo docker run -d -p 8787:3000 metabase/metabase  Observe agora que o terminal está livre e a aplicação continua rodando. E agora que a imagem já está no PC, observe a velocidade que a aplicação entra em operação.\nPodemos ainda fazer:\nsudo docker run --rm -d -p 8787:3000 metabase/metabase   --rm: Este argumento diz que, quando o container morrer ou ser parado, ele deve ser removido.  O comando run tem muitas outras opções, como por exemplo dar acesso a pastas do host para o contêiner, declarar variáveis de ambiente, etc. Mas vamos deixar isso para depois, quando estivermos falando de docker-compose.\n\nComandos: container O comando container nos permite verificar informações referentes aos containers. O container é a aplicação/imagem que foi executada ou está em execução.\nPrimeiramente vamos verificar os containers ativos, aquelas imagens que estão em execução.\nsudo docker container ls   ls: O argumento ls significa listar:  Caso você tenha executado o exemplo detached do metabase da sessão anterior terá uma linha preenchida com as informações deste contêiner. Verá que ele está ativo, em qual porta, qual o comando executado e a quanto tempo.\nAo fazer:\nsudo docker container ls -a   -a: Este argumento representa \u0026ldquo;all\u0026rdquo;  É possível ver todos os contêineres que já foram executados.\nVamos então matar esse container ativo que não mais necessitamos. Ao executar sudo docker container ls podemos ver os ativos, observe que, cada contêiner possui um CONTAINER ID, é por ele iremos matar o processo, basta fazer:\nsudo docker container kill CONTAINER_ID  No meu caso o comando foi sudo docker container kill 816e65266526, observe com sudo docker container ls que o contêiner não está mais de pé.\nHá outros argumentos que podem ser utilizados junto com container, entre eles estão exec, restart, pause, inspec, start, stop, unpause, logs, etc. Normalmente eles estão ligados à manutenção de containers, sugiro que sejam estudados caso a necessidade (preciso visualizar as entranhas do meu container para observar algo, etc).\n\nComandos: image Este comando tem o objetivo de gerir as imagens que existem. Inicialmente iremos utilizar bastante esse comando para poder baixar e subir imagens para o nosso repositório.\nVamos listar todas as imagens que estão salvas.\nsudo image ls -a  Observe os tamanhos de cada imagem, todas essas imagens estão salvas no HD. A medida que são utilizadas o espaço do HD vai diminuindo. Vamos deletar a imagem do ubuntu\nsudo docker rmi ubuntu  Caso tenha alguma imagem dependente da que iremos remover é necessário forçar a remoção\nsudo docker rmi -f ubuntu  Vamos baixá-la novamente.\nsudo docker image pull ubuntu  Falarei de como subir imagens somente após a construção da nossa primeira imagem.\n\nComandos: prune Este é um comando muito útil. Nós temos um histórico no docker, como por exemplo todos os contêineres já executados sudo docker container ls -a, e imagens que não mais utilizamos. O prune tem como objetivo limpar todos esse lixo. Ele pode ser feito em etapas ou em todo o docker. Vamos por etapas.\nContainer:\nVeja quantos container que estão parados:\nsudo docker container ls -a  Podemos remover todos os containers parados com:\nsudo docker container prune  Podemos ainda filtrar, aqui removemos todos os container parados que possuem mais de 24 horas.\nsudo docker container prune --filter=\u0026quot;until24h\u0026quot;  Images:\nPodemos remover imagens que são \u0026ldquo;zumbis\u0026rdquo;. Essas imagens são aquelas estão referenciadas por nenhum container ou imagem.\nsudo docker image prune  Podemos remover todas as imagens que não estejam associadas a um container:\nsudo docker image prune -a  E assim como no exemplo dos container podemos utilizar filtros\nsudo docker image prune --filter=\u0026quot;until24h\u0026quot;  Tudo:\nPodemos fazer um prune de tudo ao mesmo tempo incluindo Networks (Não abordei Networks nesse documento, mas acho pertinente fazer uma pesquisa em separa quando ir surgindo a necessidade de ligar com essas configurações, mas num resumo bem breve, podemos criar Networks internas para os containers de modo que eles apenas se comuniquem num espaço fechado)\nsudo docker system prune  Execute esse comando e depois observe quantos containers você possui e quantas imagens salvas.\n\nComandos: build VAMOS CONSTRUIR!!!!!\nVamos construir nosso primeiro Dockerfile. O Dockerfile é uma receita de bolo, dizendo como será a imagem. Essa receita de bolo consiste em empilhar comandos do próprio Linux num arquivo interpretável. Existe um procedimento de como deixar as imagens menores e mais eficientes, mas isso não é importante no momento, apenas construa a seu prazer para testar as possibilidades.\nO Dockerfile se baseia nos seguintes comandos:\n FROM: A imagem inicial que sua imagem irá se basear (normalmente algo pequeno, para um ambiente de DEV costuma ser um OS e para produção um OS mais capado possível) RUN: Aqui dizemos os comandos que serão executados antes da imagem estar pronta (instalar pacotes por exemplo) MAINTAINER: O autor do arquivo COPY: Copia algum arquivo para dentro da imagem (assim quando a imagem for iniciada ela já possui o arquivo) USER: Define qual será o usuário padrão para a imagem ENTRYPOINT: Define qual a aplicação do container Normalmente é um arquivo em shell dentro da imagem com tudo para ser executado. É executado quanto a imagem é executada (na criação de um container). CMD: Semelhante ao ENTRYPOINT, pode executar um comando na execução da imagem, ou passar argumentos para o ENTRYPOINT. Porém o CMD pode ser \u0026ldquo;ofuscado\u0026rdquo; por algum outro comando na hora de executar a imagem, exemplo sudo docker run --rm -it ubuntu /bin/bash, aqui estamos executando a imagem ubuntu com o CMD /bin/bash que substitui qualquer outro CMD dentro da imagem.  Vamos preparar o terreno. Primeiro precisamos de uma área de trabalho para essa imagem que vamos criar. Então vamos criar um caminho de pastas para nosso Dockerfile ficar isolado e entrar nessas pasta.\nmkdir teste_docker cd teste_docker   mkdir: Significa \u0026ldquo;make a directory\u0026rdquo;, estamos criando uma pasta chamada teste_docker cd: Significa \u0026ldquo;change directory\u0026rdquo;, vamos entrar na pasta teste_docker.  Estamos dentro da pasta de trabalho, agora iremos criar um arquivo de texto e começar a construir nossa imagem. Vamos utilizar o programa nano, caso não tenha instale:\nPara CentOS\nsudo yum install nano  Para ubuntu/debian\nsudo apt-get install nano  Vamos criar um executável para passar para dentro da imagem.Observe que, após executar esse comando agora temos uma página em branco para ser preenchida. Para salvar o arquivo após algo escrito aperte CTRL+ O, para sair do editor nano e retornar ao terminal CTRL+X. Vamos preencher o documento.\nnano text_print.sh  Coloque o seguinte texto:\n#!/usr/bin/env bash echo \u0026quot;ESTAMOS IMPRIMIIINDOO\u0026quot;  Vamos criar um arquivo chamado Dockerfile:\nnano Dockerfile  Vamos colocar o seguinte texto:\nFROM ubuntu # da imagem ubuntu MAINTAINER eu_mesmo # autor RUN apt-get update \\ \u0026amp;\u0026amp; apt-get install -y mariadb-client \\ libmariadbclient-dev \\ libmariadb-client-lgpl-dev \\ \u0026amp;\u0026amp; apt-get clean \\ \u0026amp;\u0026amp; rm -rf /var/lib/apt/* \\ \u0026amp;\u0026amp; rm -rf /tmp/* COPY text_print.sh /text_print.sh RUN chmod 755 /text_print.sh ENTRYPOINT /text_print.sh  A seguir CTRL+O para salvar e CTRL+X para sair.\nAcima temos:\n FROM: imagem ubuntu MAINTAINER: autor RUN: Executo uma série de comandos, primeiro dou update nos repositórios do apt-get (instalador de pacotes do ubuntu). Depois instalo 3 pacotes, cliente e bibliotecas do MariaDB. Após isso eu limpo o cache de instalação e deleto qualquer arquivo intermediário que possa ter ficado das instalações. COPY: Copio o arquivo que criamos anteriormente e coloco na raiz RUN: Dou permissão para esse arquivo ser executado -ENTRYPOINT: Aponto o que será executado quando a subirmos o contêiner.  Agora que temos a receita vamos construir a imagem \u0026ldquo;buildar\u0026rdquo;. A pasta deve conter apenas dois arquivos, verifique:\nls  Deve retornar isso:\nDockerfile text_print.sh  Então vamos buildar a imagem:\nsudo docker build -t imagem_teste .   build: é o comando para construir a imagem -t: é o argumento dizendo que vamos nomear a nossa imagem imagem_teste: O nome da nossa imagem .: O comando build precisa que você referencie a pasta onde está o Dockerfile e os arquivos necessários para a construção. O . referencia a pasta que você está no presente momento com o console.  Aguarde a imagem terminar de buildar e verifique:\nsudo docker image ls  Caso você tenha uma conta no docker hub (repositório oficial) ou tenha algum repositório de imagens configurado você pode fazer o seguinte para subir a imagem para tal.\nsudo docker tag imagem_teste seu_nome_usuario_repo/imagem_teste sudo docker push seu_nome_usuario_repo/imagem_teste  Primeiro renomeia a imagem, colocando seu usuário como prefixo. Depois usar o push, para o upload da imagem, irá pedir um login e senha do repositório e irá iniciar o upload.\nVamos testar a imagem!!\nsudo docker run imagem_teste  Imprimiu o que queríamos?\nVamos sair desta pasta que criamos e voltar para onde estávamos\ncd ..   ..: Este símbolo significa subir uma pasta  \n","date":1564617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564617600,"objectID":"6b3cd1ea75be5147ab81b6ed225fb3da","permalink":"/tutoriais/docker/docker_commandos/","publishdate":"2019-08-01T00:00:00Z","relpermalink":"/tutoriais/docker/docker_commandos/","section":"tutoriais","summary":"Comandos: run O comando run, quando não utilizado com outra ferramente de orquestração, como docker-compose, kubernets, ou outro, será o comando mais utilizado. Ele roda um container por meio de uma imagem, normalmente o container executa um comando e morre. A imagem hello-world basicamente executa um print de texto no console e depois morre (na verdade finaliza com sucesso). Se subirmos um script batch, será executado tudo que deve ser feito e depois o container morre.","tags":null,"title":"Docker Commands","type":"docs"},{"authors":null,"categories":null,"content":" Docker-compose O docker-compose tem como objetivo melhor organizar os container Ele nada mais é do que uma instrução de como subir contêineres e Networks, uma versão em arquivo do docker run. Vamos fazer exemplos e compará-los.\nExemplo 1: Subir um container numa porta específica Vamos subir um container numa porta específica e dar nome a ele, assim podemos identificar pelo nome do container qual aplicação está rodando com o comando run.\nsudo docker run -d -p 8787:8787 --name=r_server_1 zegkreist/r-dl-cpu  Teste o acesso em http://127.0.0.1:8787 se você estiver na sua máquina local ou http://ip-da-instancia:8787 numa instância na nuvem. É possível logar no serviço com login = rstudio e senha = rstudio.\nVamos derrubar o serviço utilizando o nome do contêiner.\nsudo docker container kill r_server_1  Agora vamos criar um arquivo docker-compose e utilizar seu sistema para levantar a aplicação.\nPrimeiro, vamos criar uma pasta de trabalho:\nmkdir docker_compose_rstudio_server  Vamos entrar na pasta:\ncd docker_compose_rstudio_server  Agora vamos criar um arquivo docker-compose.yml e preencher seu conteúdo.\nnano docker-compose.yml  Estamos dentro do editor de texto nano, coloque o seguinte conteúdo:\nversion: '2' services: r-dl-cpu_teste: image: zegkreist/r-dl-cpu container_name: r_server_1 restart: always ports: - \u0026quot;8787:8787\u0026quot;   version: A versão do docker-compose que iremos utilizar, cada uma possui seus features. services: Os serviços que iremos levantar, pode ser mais de 1, neste caso será somente um o r-dl-cpu-teste r-dl-cpu_teste: Este é o serviço (que nomeamos nós mesmos) que será levantado, tudo que está indentado com ele são suas definições. image: Estamos informando qual a imagem que será utilizado pelo serviço container_name: O nome que o container receberá restart: A política de restart do serviço, neste caso always significa que, caso o serviço morra ele será levantado novamente de imediato ports: Aqui estamos informando o mapping das portas, pode ser mais de um map por vez.  Pressione CTRL+O para salvar e CTRL+X para sair. Agora vamos subir o serviço\ndocker-compose up -d  Teste o acesso em http://127.0.0.1:8787 se você estiver na sua máquina local ou http://ip-da-instancia:8787 numa instância na nuvem. É possível logar no serviço com login = rstudio e senha = rstudio.\nVamos matar o serviço, para isso basta apenas:\ndocker-compose down  Exemplo 2: Subir uma imagem passando variáveis de ambiente É possível passar variáveis de ambiente para uma imagem utilizar na execução de um container. Isso se faz importante para que logins e senhas não fique hardcoded em códigos dentro do container. Podemos então passar essas variáveis e consumi-las em nosso códigos.\nEsta imagem em específico permite que passemos variáveis de usuário, Id do usuário e senha para que automaticamente se crie um usuário com senha para acessar o R server. Caso elas não sejam passadas é criado o usuário padrão rstudio:rstudio.\nVamos subir esta imagem utilizando o comando run, veja que, o comando já fica desagradável aos olhos (e não pode ser versionado).\nsudo docker run -d -p 8787:8787 --name=r_server_1 -e USER='teste' \\ -e USERID='1000' \\ -e PASSWORD='facil123' zegkreist/r-dl-cpu  Teste o acesso em http://127.0.0.1:8787 se você estiver na sua máquina local ou http://ip-da-instancia:8787 numa instância na nuvem. É possível logar no serviço com login = teste e senha = facil123.\nVamos interromper o serviço.\nsudo docker container kill r_server_1  Agora, iremos editar novamente o arquivo docker-compose.yml.\nnano docker-compose.yml  Substitua seu conteúdo pelo seguinte texto:\nversion: '2' services: r-dl-cpu_teste: image: zegkreist/r-dl-cpu container_name: r_server_1 restart: always environment: - USER=teste - USERID=1000 - PASSWORD=facil123 ports: - \u0026quot;8787:8787\u0026quot;  CTRL+O para salvar e CTRL+X para sair.\ndocker-compose up -d  Teste o acesso em http://127.0.0.1:8787 se você estiver na sua máquina local ou http://ip-da-instancia:8787 numa instância na nuvem. É possível logar no serviço com login = teste e senha = facil123.\nBaixe a aplicação\ndocker-compose down  Exemplo 3: Montar volumes A ideia por trás de montar volumes é que, o container possa acessar arquivos num local persistente no host. Quando se cria algum arquivo ou alteração numa área exclusiva do container (dentro do dele), quando este for derrubado ou reiniciado está mudança será perdida. Então o que fazemos é dar permissão para o container poder ler ou ler e escrever numa região do host.\nPrimeiro vamos definir a pasta que será montada dentro do container. Vamos criar uma pasta embaixo da pasta de usuário\nmkdir /home/${USER}/teste   ${USER}: Isto acessa a variável de ambiente USER que é o nome do seu usuário  Vamos escrever algum arquivo nesta paste\necho \u0026quot;nothing to see here\u0026quot; \u0026gt; /home/${USER}/teste/arquivo.txt  Vamos subir um container com essa pasta montada utilizando o comando run\nsudo docker run -d -p 3000:8787 --name=r_server_1 -e USER='teste' \\ -e USERID='1000' \\ -e PASSWORD='facil123'\\ -v /home/${USER}/teste:/home/teste/pasta_montada zegkreist/r-dl-cpu  Teste o acesso em http://127.0.0.1:8787 se você estiver na sua máquina local ou http://ip-da-instancia:8787 numa instância na nuvem. É possível logar no serviço com login = teste e senha = facil123.\nNo canto direito inferior na aba files olhe o folder com nome \u0026ldquo;pasta_montada\u0026rdquo;, veja o arquivo que está dentro, acesse e faça alguma modificação e salve.\nAgora, vamos derrubar o container.\nsudo docker container kill r_server_1  Vamos ver como está o arquivo que foi modificado dentro do container.\ncat /home/${USER}/teste/arquivo.txt  E ai? Legal? tudo certo?\nVamos agora para o docker-compose, onde podemos ter tudo isso de forma versionada se usarmos um git (\u0026lsquo;se\u0026rsquo; do verbo \u0026lsquo;vamos\u0026rsquo;).\nnano docker-compose.yml  Coloque o seguinte conteúdo:\nversion: '2' services: r-dl-cpu_teste: image: zegkreist/r-dl-cpu container_name: r_server_1 restart: always environment: - USER=teste - USERID=1000 - PASSWORD=facil123 ports: - \u0026quot;8787:8787\u0026quot; volumes: - /home/${USER}/teste:/home/teste/pasta_montada:rw  Vamos levantar:\ndocker-compose up -d  Teste o acesso em http://127.0.0.1:8787 se você estiver na sua máquina local ou http://ip-da-instancia:8787 numa instância na nuvem. É possível logar no serviço com login = teste e senha = facil123.\nNo canto direito inferior na aba files olhe o folder com nome \u0026ldquo;pasta_montada\u0026rdquo;, veja o arquivo que está dentro, acesse e faça alguma modificação e salve.\nBaixe a aplicação\ndocker-compose down  Vamos verificar como está o arquivo modificado\ncat /home/${USER}/teste/arquivo.txt  \n","date":1564617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564617600,"objectID":"21bdbc13d8592cee3a4287a39f7b2b82","permalink":"/tutoriais/docker/docker_compose/","publishdate":"2019-08-01T00:00:00Z","relpermalink":"/tutoriais/docker/docker_compose/","section":"tutoriais","summary":"Docker-compose O docker-compose tem como objetivo melhor organizar os container Ele nada mais é do que uma instrução de como subir contêineres e Networks, uma versão em arquivo do docker run. Vamos fazer exemplos e compará-los.\nExemplo 1: Subir um container numa porta específica Vamos subir um container numa porta específica e dar nome a ele, assim podemos identificar pelo nome do container qual aplicação está rodando com o comando run.","tags":null,"title":"Docker Compose","type":"docs"},{"authors":[],"categories":["docker","tutorial","linux"],"content":"\nOláá, olá a todos!! Espero que estejam ótimos. É sempre bom isso.\nVenho por meio deste, meu primeiro post neste blog, informar que coloquei um \u0026ldquo;tutorialzinho\u0026rdquo; de docker também neste blog, veja só!\nO Docker nos permite abstrair uma série de problemas. Quando fazemos análises de dados não sabemos exatamente o que utilizar durante o processo.\nPartimos de uma idéia, uma hipótese, mas isto não é fixo, a partir do aprendizado e da familiaridade que vai se construindo ao trabalhar com os dados novas ideias surgem, e com isso a necessidade de novas ferramentas para algo em específico surge. Essa nova ferramenta pode vir em formato de network, de algum pacote, uma lib, das nuvens \u0026hellip; de baixo da terra, sei lah.\nA questão aqui é ir entulhando seu sistema operacional com toda essas libs e a carga de dependências que normalmente vem junto. As vezes algum componente não conversa bem com outro e sai briga. Logo seu OS vai ficando sujo. Aqui que o Docker ajuda.\nQuando se desenvolve dentro de um container Docker você tem toda a liberdade de derrubar as paredes da casa, se o telhado cair na sua cabeça tudo bem!! Apenas restarte o container e tá tudo certo, a casa está de pé novamente, seu OS limpo da mesma forma, seu ambiente de desenvolvimento intacto.\nHá quase um ano eu trabalho utilizando uma imagem específica, tem basicamente tudo que eu preciso, do R server ao Latex! A imagem é gigante? É sim! Mas se eu precisar formatar meu PC em 10 minutos instalo o docker, baixo a imagem e estou com meu ambiente de desenvolvimento que já conheço de pé.\nO Docker facilita também a parte de colocar as coisas em produção, já que você consegue versionar seu ambiente de execução inteiro.\nPor isso e mais um pouco resolvi colocar um tutorial de Docker aqui. Ensino a instalar, falo mais detalhadamente sobre alguns comandos para quem não está muito acostumado com o linux. Exemplifico os principais comandos e mostro a mágica que é o docker-compose aquela delícia!!!\nDê uma olhadinha! XD\ntutorialzinho\n","date":1568937600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568943650,"objectID":"05f0efe35748481ab3ede84384623f95","permalink":"/post/tutorialzinho-de-docker/","publishdate":"2019-09-20T00:00:00Z","relpermalink":"/post/tutorialzinho-de-docker/","section":"post","summary":"Oláá, olá a todos!! Espero que estejam ótimos. É sempre bom isso.\nVenho por meio deste, meu primeiro post neste blog, informar que coloquei um \u0026ldquo;tutorialzinho\u0026rdquo; de docker também neste blog, veja só!\nO Docker nos permite abstrair uma série de problemas. Quando fazemos análises de dados não sabemos exatamente o que utilizar durante o processo.\nPartimos de uma idéia, uma hipótese, mas isto não é fixo, a partir do aprendizado e da familiaridade que vai se construindo ao trabalhar com os dados novas ideias surgem, e com isso a necessidade de novas ferramentas para algo em específico surge.","tags":[],"title":"Tutorialzinho de Docker","type":"post"}]